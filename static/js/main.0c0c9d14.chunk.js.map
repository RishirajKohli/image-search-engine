{"version":3,"sources":["components/ImagesPanel/index.js","components/DetailedView/index.js","containers/ImageSearchPage/index.js","components/Routes/index.js","containers/App/index.js","serviceWorker.js","containers/App/reducer.js","reducer.js","containers/App/constants.js","index.js"],"names":["memo","images","class","map","image","to","process","id","alt","alt_description","src","urls","thumb","unsplash","Unsplash","accessKey","photoId","useParams","useState","isImageLoading","setIsImageLoading","setImage","error","setError","useEffect","photos","getPhoto","then","res","status","json","Error","catch","err","console","handleCLose","useCallback","window","history","back","downloadPhoto","className","onClick","icon","closeThick","user","username","profile_image","medium","first_name","last_name","twitter_username","instagram_username","small","href","regular","download","searchString","setSearchString","areImagesLoading","setAreImagesLoading","areMoreIMagesLoading","setAreMoreImagesLoading","showingRandom","setShowingRandom","setImages","currentPage","setCurrentPage","totalPages","setTotalPages","getRandomPhotos","getSearchedPhotos","getRandomPhoto","count","search","orientation","response","results","total_pages","handleInputChange","event","target","value","handleSearch","preventDefault","loadMore","pageNumber","onSubmit","onChange","placeholder","type","cardSearch","length","path","render","props","component","ImageSearchPage","Boolean","location","hostname","match","initialState","isThemeLight","combineReducers","app","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0c0c9d14.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport \"./style.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction ImagesPanel({ images }) {\n  return (\n    <div class=\"image-panel\">\n      {images.map((image) => {\n        return (\n          <Link to={process.env.PUBLIC_URL + `/${image.id}`}>\n            <div class=\"image-block\">\n              <img alt={image.alt_description} src={image.urls.thumb}></img>\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\nexport default memo(ImagesPanel);\n","import React, { memo, useState, useEffect, useCallback } from \"react\";\nimport \"./style.scss\";\nimport { useParams } from \"react-router-dom\";\nimport Unsplash from \"unsplash-js\";\n// npm install --save-dev @iconify/react @iconify/icons-mdi\nimport { Icon } from \"@iconify/react\";\nimport closeThick from \"@iconify/icons-mdi/close-thick\";\n\nexport const unsplash = new Unsplash({\n  accessKey: \"JKtfowv6i-uF34qRztTVR4FwBUyLf1RJO_vn13tF_74\",\n});\nfunction DetailedView() {\n  const { photoId } = useParams();\n  const [isImageLoading, setIsImageLoading] = useState(true);\n  const [image, setImage] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (isImageLoading) {\n      unsplash.photos\n        .getPhoto(photoId)\n        .then((res) => {\n          if (res.status == 200) return res.json();\n          throw new Error();\n        })\n        .then((res) => {\n          setImage(res);\n          setIsImageLoading(false);\n        })\n        .catch((err) => {\n          console.error(err);\n          setError(\"An error. Try Again!\");\n          setIsImageLoading(false);\n        });\n    }\n  }, [isImageLoading, photoId]);\n  const handleCLose = useCallback(() => {\n    window.history.back();\n  }, []);\n  const handleDownload = useCallback(() => {\n    unsplash.photos.downloadPhoto(image);\n  }, [image]);\n  return (\n    <>\n      <div className=\"backdrop\">\n        <div className=\"modal-overlay\">\n          <div className=\"close\">\n            <button onClick={handleCLose}>\n              <Icon icon={closeThick}></Icon>\n            </button>\n          </div>\n          {isImageLoading ? (\n            <div className=\"placeholder\"> Loading...</div>\n          ) : error ? (\n            <div className=\"placeholder\">{error}</div>\n          ) : (\n            <>\n              <div className=\"user\">\n                <div className=\"user-avatar\">\n                  <img\n                    alt={image.user.username}\n                    src={image.user.profile_image.medium}\n                  ></img>\n                </div>\n                <div className=\"user-info\">\n                  <div>\n                    <b>{`${image.user.first_name} ${image.user.last_name}`}</b>\n                  </div>\n                  <div className=\"user-info__username\">{`@${\n                    image.user.twitter_username ||\n                    image.user.instagram_username ||\n                    image.user.username\n                  }`}</div>\n                </div>\n              </div>\n              <div className=\"image-block\">\n                <img alt={image.alt_description} src={image.urls.small}></img>\n              </div>\n              <div className=\"download-block\">\n                <a href={image.urls.regular} download>\n                  Download\n                </a>\n                {/* <button onClick={handleDownload}> Download</button> */}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\nexport default memo(DetailedView);\n","import React, { memo, useState, useCallback, useEffect } from \"react\";\nimport Unsplash from \"unsplash-js\";\nimport { Route } from \"react-router-dom\";\n// npm install --save-dev @iconify/react @iconify/icons-mdi\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport cardSearch from \"@iconify/icons-mdi/card-search\";\n\nimport ImagesPanel from \"../../components/ImagesPanel\";\nimport DetailedView from \"../../components/DetailedView\";\nimport \"./style.scss\";\n\nexport const unsplash = new Unsplash({\n  accessKey: \"JKtfowv6i-uF34qRztTVR4FwBUyLf1RJO_vn13tF_74\",\n});\n\nfunction ImageSearchPage() {\n  const [searchString, setSearchString] = useState(\"\");\n  const [areImagesLoading, setAreImagesLoading] = useState(true);\n  const [areMoreIMagesLoading, setAreMoreImagesLoading] = useState(false);\n  const [showingRandom, setShowingRandom] = useState(true);\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(null);\n\n  useEffect(() => {\n    getRandomPhotos();\n  }, []);\n\n  useEffect(() => {\n    if (showingRandom && areMoreIMagesLoading) {\n      getRandomPhotos();\n    } else if (areMoreIMagesLoading) {\n      getSearchedPhotos(searchString);\n    } else if (!showingRandom && areImagesLoading) {\n      getSearchedPhotos(searchString);\n    }\n  }, [showingRandom, areImagesLoading, areMoreIMagesLoading]);\n  const getRandomPhotos = () => {\n    unsplash.photos\n      .getRandomPhoto({ count: 9 })\n      .then((res) => {\n        if (res.status === 200) return res.json();\n        else throw new Error();\n      })\n\n      .then((res) => {\n        setImages([...images, ...res]);\n        setAreImagesLoading(false);\n        setAreMoreImagesLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setImages([]);\n        setAreMoreImagesLoading(false);\n\n        setAreImagesLoading(false);\n      });\n  };\n  const getSearchedPhotos = (searchString) => {\n    unsplash.search\n      .photos(searchString, currentPage, 9, { orientation: \"landscape\" })\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error();\n      })\n      .then((res) => {\n        setImages([...images, ...res.results]);\n        setTotalPages(res.total_pages);\n        setAreMoreImagesLoading(false);\n\n        setAreImagesLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setImages([]);\n        setAreMoreImagesLoading(false);\n\n        setAreImagesLoading(false);\n      });\n  };\n  const handleInputChange = useCallback((event) => {\n    setSearchString(event.target.value);\n  }, []);\n  const handleSearch = useCallback(\n    (event) => {\n      event.preventDefault();\n      if (searchString) {\n        setShowingRandom(false);\n        setImages([]);\n        setAreImagesLoading(true);\n      }\n    },\n    [searchString]\n  );\n  const loadMore = useCallback(\n    (pageNumber) => {\n      setAreMoreImagesLoading(true);\n\n      if (!showingRandom) setCurrentPage(pageNumber);\n    },\n    [showingRandom]\n  );\n\n  return (\n    <main className=\"main-block\">\n      <form onSubmit={handleSearch} className=\"search-box\">\n        <input\n          value={searchString}\n          onChange={handleInputChange}\n          placeholder=\"Search for images here...\"\n        ></input>\n        <button type=\"submit\">\n          <Icon icon={cardSearch} className=\"search-button\"></Icon>\n        </button>\n      </form>\n      {areImagesLoading ? (\n        <div className=\"placeholder\"> Loading....</div>\n      ) : images.length > 1 ? (\n        <>\n          <ImagesPanel images={images}></ImagesPanel>\n          <div class=\"load-more-block\">\n            {areMoreIMagesLoading ? (\n              \"Loading More Images...\"\n            ) : !showingRandom && currentPage == totalPages ? null : (\n              <button onClick={() => loadMore(currentPage + 1)}>\n                Load More\n              </button>\n            )}\n          </div>\n        </>\n      ) : (\n        <div className=\"placeholder\">Oops! No Images Found.</div>\n      )}\n      <Route\n        path={process.env.PUBLIC_URL + \"/:photoId\"}\n        render={(props) => <DetailedView {...props}></DetailedView>}\n      ></Route>\n    </main>\n  );\n}\n\nexport default memo(ImageSearchPage);\n","import React, { memo } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport ImageSearchPage from \"../../containers/ImageSearchPage\";\nfunction Routes() {\n  return (\n    <Switch>\n      <Route\n        path={process.env.PUBLIC_URL + \"/\"}\n        component={ImageSearchPage}\n      ></Route>\n    </Switch>\n  );\n}\nexport default memo(Routes);\n","import React, { memo } from \"react\";\nimport Routes from \"../../components/Routes\";\nimport \"./style.scss\";\nfunction App() {\n  return <Routes></Routes>;\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TOGGLE_THEME } from \"./constants\";\n\nconst initialState = {\n  isThemeLight: true,\n};\nexport function app(state = initialState, action) {\n  switch (action.type) {\n    case TOGGLE_THEME: {\n      let isThemeLight = !state.isThemeLight;\n      return { ...state, isThemeLight };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n// import { tableArea } from \"./containers/TableArea/reducer\";\nimport { app } from \"./containers/App/reducer\";\nexport default combineReducers({\n  app,\n});\n","export const TOGGLE_THEME = \"TOGGLE_THEME\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducer\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet sagaMiddleware = createSagaMiddleware();\nlet store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}